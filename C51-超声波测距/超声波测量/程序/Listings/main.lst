C51 COMPILER V9.59.0.0   MAIN                                                              05/24/2020 10:15:00 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: E:\MDK5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main.ls
                    -t) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include<reg51.h>
   2          #include "intrins.h"
   3          #define uchar unsigned char
   4          #define uint unsigned int
   5          #define LCD1602_DATAPINS P0
   6          sbit LCD1602_E=P2^2;
   7          sbit LCD1602_RW=P2^1;
   8          sbit LCD1602_RS=P2^0;
   9          sbit Trig = P1^0;
  10          sbit Echo = P1^1;
  11          unsigned long S=0;
  12          bit      flag =0;
  13          unsigned int DIstance,time;
  14          
  15          /*******************************************************************************
  16          * 函 数 名         : Lcd1602_Delay1ms
  17          * 函数功能       : 延时函数，延时1ms
  18          * 输    入         : c
  19          * 输    出         : 无
  20          * 说    名         : 该函数是在12MHZ晶振下，12分频单片机的延时。
  21          *******************************************************************************/
  22          
  23          void Lcd1602_Delay1ms(uint c)   //误差 0us
  24          {
  25   1          uchar a,b;
  26   1        for (; c>0; c--)
  27   1        {
  28   2           for (b=199;b>0;b--)
  29   2           {
  30   3              for(a=1;a>0;a--);
  31   3           }      
  32   2        }
  33   1            
  34   1      }
  35          
  36          /*******************************************************************************
  37          * 函 数 名         : LcdWriteCom
  38          * 函数功能       : 向LCD写入一个字节的命令
  39          * 输    入         : com
  40          * 输    出         : 无
  41          *******************************************************************************/
  42          void LcdWriteCom(uchar com)   //写入命令
  43          {
  44   1        LCD1602_E = 0;     //使能
  45   1        LCD1602_RS = 0;    //选择发送命令
  46   1        LCD1602_RW = 0;    //选择写入
  47   1        
  48   1        LCD1602_DATAPINS = com;     //放入命令
  49   1        Lcd1602_Delay1ms(1);    //等待数据稳定
  50   1      
  51   1        LCD1602_E = 1;            //写入时序
  52   1        Lcd1602_Delay1ms(5);    //保持时间
  53   1        LCD1602_E = 0;
  54   1      }
C51 COMPILER V9.59.0.0   MAIN                                                              05/24/2020 10:15:00 PAGE 2   

  55          /*******************************************************************************
  56          * 函 数 名         : LcdWriteData
  57          * 函数功能       : 向LCD写入一个字节的数据
  58          * 输    入         : dat
  59          * 输    出         : 无
  60          *******************************************************************************/           
  61          void LcdWriteData(uchar dat)      //写入数据
  62          {
  63   1        LCD1602_E = 0;  //使能清零
  64   1        LCD1602_RS = 1; //选择输入数据
  65   1        LCD1602_RW = 0; //选择写入
  66   1      
  67   1        LCD1602_DATAPINS = dat; //写入数据
  68   1        Lcd1602_Delay1ms(1);
  69   1      
  70   1        LCD1602_E = 1;   //写入时序
  71   1        Lcd1602_Delay1ms(5);   //保持时间
  72   1        LCD1602_E = 0;
  73   1      }
  74          
  75          
  76          /*******************************************************************************
  77          * 函 数 名       : LcdInit()
  78          * 函数功能     : 初始化LCD屏
  79          * 输    入       : 无
  80          * 输    出       : 无
  81          *******************************************************************************/       
  82          void LcdInit()              //LCD初始化子程序
  83          {
  84   1        LcdWriteCom(0x38);  //开显示
  85   1        LcdWriteCom(0x0c);  //开显示不显示光标
  86   1        LcdWriteCom(0x06);  //写一个指针加1
  87   1        LcdWriteCom(0x01);  //清屏
  88   1        LcdWriteCom(0x80);  //设置数据指针起点
  89   1      }
  90          
  91          
  92          
  93          
  94          //按指定位置显示一个字符
  95          void DisplayOneChar(unsigned char X, unsigned char Y, unsigned char DData)
  96          {
  97   1       Y &= 0x1;
  98   1       X &= 0xF; //限制X不能大于15，Y不能大于1
  99   1       if (Y) X |= 0x40; //当要显示第二行时地址码+0x40;
 100   1       X |= 0x80; // 算出指令码
 101   1       LcdWriteCom(X); //这里不检测忙信号，发送地址码
 102   1       LcdWriteData(DData);
 103   1      }
 104          //按指定位置显示一串字符
 105          void DisplayListChar(unsigned char X, unsigned char Y, unsigned char code *DData)
 106          {
 107   1       unsigned char ListLength;
 108   1      
 109   1        ListLength = 0;
 110   1       Y &= 0x1;
 111   1       X &= 0xF; //限制X不能大于15，Y不能大于1
 112   1       while (DData[ListLength]>=0x20) //若到达字串尾则退出
 113   1        {
 114   2         if (X <= 0xF) //X坐标应小于0xF
 115   2          {
 116   3           DisplayOneChar(X, Y, DData[ListLength]); //显示单个字符
C51 COMPILER V9.59.0.0   MAIN                                                              05/24/2020 10:15:00 PAGE 3   

 117   3           ListLength++;
 118   3           X++;
 119   3          }
 120   2        }
 121   1      }
 122          
 123          void  StartModule()              //启动模块
 124          {
 125   1          Trig=1;                          //启动一次模块
 126   1          _nop_(); 
 127   1          _nop_(); 
 128   1          _nop_(); 
 129   1          _nop_(); 
 130   1          _nop_(); 
 131   1          _nop_(); 
 132   1          _nop_(); 
 133   1          _nop_(); 
 134   1          _nop_(); 
 135   1          _nop_(); 
 136   1          _nop_(); 
 137   1          _nop_(); 
 138   1          _nop_(); 
 139   1          _nop_(); 
 140   1          _nop_(); 
 141   1          _nop_(); 
 142   1          _nop_();
 143   1          _nop_(); 
 144   1          _nop_(); 
 145   1          _nop_(); 
 146   1          _nop_();
 147   1          Trig=0;
 148   1      }
 149          void Conut(void)
 150          {
 151   1         StartModule();
 152   1         while(!Echo);    //当RX为零时等待
 153   1         TR0=1;         //开启计数
 154   1         while(Echo);     //当RX为1计数并等待
 155   1         TR0=0;       //关闭计数
 156   1         time=TH0*256+TL0;
 157   1         TH0=0;
 158   1         TL0=0;
 159   1        
 160   1         S=(time*1.7)/100;     //算出来是CM
 161   1         DIstance = S;
 162   1         if((S>=700)||flag==1) //超出测量范围显示“-”
 163   1         {   
 164   2          flag=0;
 165   2         
 166   2          DisplayOneChar(0, 1, '0');
 167   2          DisplayOneChar(1, 1, '.');  //显示点
 168   2          DisplayOneChar(2, 1, '0');
 169   2          DisplayOneChar(3, 1, '0');
 170   2          DisplayOneChar(4, 1, 'M');  //显示M
 171   2         }
 172   1         else
 173   1         {
 174   2          DisplayOneChar(0, 1, (char)(S/100+'0'));
 175   2          DisplayOneChar(1, 1, '.');  //显示点
 176   2          DisplayOneChar(2, 1, (char)(S/10%10+'0'));
 177   2          DisplayOneChar(3, 1, (char)(S%10+'0'));
 178   2          DisplayOneChar(4, 1, 'M');  //显示M
C51 COMPILER V9.59.0.0   MAIN                                                              05/24/2020 10:15:00 PAGE 4   

 179   2         }
 180   1      }
 181          void zd0() interrupt 1     //T0中断用来计数器溢出,超过测距范围
 182          {
 183   1          flag=1;              //中断溢出标志
 184   1      }
 185          void Sr04_Init()
 186          {
 187   1         TMOD=0x01;      //设T0为方式1，GATE=1；
 188   1         TH0=0;
 189   1         TL0=0;          
 190   1         ET0=1;             //允许T0中断
 191   1         EA=1;         //开启总中断 
 192   1      }
 193          
 194          void main()
 195          {
 196   1        Sr04_Init();
 197   1        LcdInit();
 198   1        DisplayListChar(0,0,"Welcome");
 199   1        while(1)
 200   1        {
 201   2          Conut();
 202   2        }
 203   1      }
 204          
 205          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    490    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
